<?xml version="1.0"?>
<launch>
  <!-- ###########  Set Launch Arguments  ########### -->
  <!-- #  Meta  # -->
  <arg name="robot_id" default="1"/>                    <!-- Robot Identifier -->
  <arg name="robot_ns" value="beetle$(arg robot_id)"/>  <!-- Namespace for the robot -->
  <arg name="real_machine" default="True"/>             <!-- Flag to actually execute assembly, actuation and disassembly processes for the motors and gimbal if True -->
  <arg name="simulation" default="False"/>              <!-- Flag to set environment for simulation and avoid activating collection of sensor data if True (only used for launch logic of nodes) -->
  <arg name="config_dir" default="$(find beetle_omni)/config"/>     <!-- -->

  <!-- #  State Estimation  # -->
  <!-- Options for estimation mode: -->
      <!-- EGOMOTION_ESTIMATE = 0 -->
      <!-- EXPERIMENT_ESTIMATE = 1. for unstable mocap, use this mode -->
      <!-- GROUND_TRUTH = 2 -->
  <arg name="real_estimate_mode"  default= "1"/>        <!-- Use real estimation mode,  -->
  <arg name="sim_estimate_mode"  default= "2"/>         <!-- Use simulation estimation mode, i.e., ground truth -->
  
  <!-- #  Wrench Estimation  # -->
  <arg name="wrench_est_mode" default="none"/>          <!-- Choose mode for wrench estimation; 'none' / 'mom': momentum / 'ma': hybrid mode / 'acc': acceleration / 'mhe_ma': mhe with acceleration and momentum estimation -->

  <!-- #  Controller  # -->
  <!-- <arg name="control_mode" default="0"/>-->        <!-- NOT USED -->
  <arg name="nmpc_mode" default="0"/>                   <!-- Choose mode for NMPC controller; 0: FullDist / 1: FullServoThrustDist / 2: FullServoImp / 3: Full / 6: NoServoDelay -->

  <!-- #  Visualization  # -->
  <arg name="headless" default="True"/>                 <!-- Flag to (de)activate visualization using rviz and gazebo; if True it visualization is surpressed -->
  <arg name="launch_gazebo" default="True"/>            <!-- Flag to (de)activate visualization using rviz and gazebo; if True but headless==False visualization is still surpressed -->
  <arg name="worldtype" default="$(find aerial_robot_simulation)/gazebo_model/world/empty.world"/>  <!-- Set world environment in for Gazebo visualization-->
  <arg name="spawn_x" default="0.0"/>                   <!-- Sets spawn position in the Gazebo Sim environment in the x-dimension -->
  <arg name="spawn_y" default="0.0"/>                   <!-- Sets spawn position in the Gazebo Sim environment in the y-dimension -->
  <arg name="spawn_z" default="0.0"/>                   <!-- Sets spawn position in the Gazebo Sim environment in the z-dimension -->
  <arg name="spawn_yaw" default="0.0"/>                 <!-- Sets spawn orientation in the Gazebo Sim environment around the y-axis -->
  <!-- <arg name="direct_model" default="False"/>-->    <!-- NOT USED -->
  <!-- <arg name="direct_model_name"/>-->               <!-- NOT USED -->  

  
  <!-- ###########  Load and Set Parameters  ########### -->
  <!-- Apply settings to a group of nodes with the namespace 'ns' -->
  <group ns="$(arg robot_ns)">
    <!-- TODO If robot with this robot_id already exists, display warning and increment -->
    <param name="robot_id" value="$(arg robot_id)"/>

    <!-- #  Motor  # -->
    <rosparam file="$(arg config_dir)/MotorInfoDShot.yaml" command="load"/>

    <!-- #  Servo  # -->
    <rosparam file="$(arg config_dir)/Servo.yaml" command="load"/>

    <!-- #  Battery  # -->
    <rosparam file="$(arg config_dir)/Battery.yaml" command="load"/>

    <!-- #  Robot Model  # -->
    <rosparam file="$(arg config_dir)/BeetleOmniRobotModel.yaml" command="load"/>
    
    <!-- #  State Estimation  # -->
    <param name="estimation/mode" value="$(arg real_estimate_mode)" if="$(arg real_machine)"/>
    <param name="estimation/mode" value="$(arg sim_estimate_mode)" if="$(arg simulation)"/>

    <!-- #  Sensor Fusion  # -->
    <rosparam file="$(arg config_dir)/BeetleOmniStateEstimation.yaml" command="load"/>
    <rosparam file="$(arg config_dir)/BeetleOmniSimulation.yaml" command="load" if="$(eval arg('simulation') and not arg('real_machine'))"/>

    <!-- #  Navigation  # -->
    <rosparam file="$(arg config_dir)/NavigationConfig.yaml" command="load"/>     <!-- Using default navigator -->

    <!-- #  Wrench Estimation  # -->
    <rosparam file="$(arg config_dir)/WrenchEstITerm.yaml" command="load"/>
    <param name="wrench_estimator_name" value="aerial_robot_control::WrenchEstNone" if="$(eval arg('wrench_est_mode') == 'none')"/>
    <rosparam file="$(arg config_dir)/WrenchEstMomentum.yaml" command="load" if="$(eval arg('wrench_est_mode') == 'mom')"/>
    <rosparam file="$(arg config_dir)/WrenchEstMomAcc.yaml" command="load" if="$(eval arg('wrench_est_mode') == 'ma')"/>
    <rosparam file="$(arg config_dir)/WrenchEstAcceleration.yaml" command="load" if="$(eval arg('wrench_est_mode') == 'acc')"/>
    <rosparam file="$(arg config_dir)/WrenchEstMHEAccMom.yaml" command="load" if="$(eval arg('wrench_est_mode') == 'mhe_ma')"/>

    <!-- #  Controller  # -->
    <rosparam file="$(arg config_dir)/PhysParamBeetleOmni.yaml" command="load"/>
    <rosparam file="$(arg config_dir)/BeetleNMPCFullDist.yaml" command="load" if="$(eval arg('nmpc_mode') == 0)"/>
    <rosparam file="$(arg config_dir)/BeetleNMPCFullServoThrustDist.yaml" command="load" if="$(eval arg('nmpc_mode') == 1)"/>
    <rosparam file="$(arg config_dir)/BeetleNMPCFullServoImp.yaml" command="load" if="$(eval arg('nmpc_mode') == 2)"/>
    <!-- <rosparam file="$(arg config_dir)/BeetleNMPCFull.yaml" command="load" if="$(eval arg('nmpc_mode') == 3)"/> -->
    <!-- <rosparam file="$(arg config_dir)/BeetleNMPCNoServoDelay.yaml" command="load" if="$(eval arg('nmpc_mode') == 6)"/> -->
  </group>

  <!-- ###########  Initialize Base Platform  ########### -->
  <node pkg="aerial_robot_base" type="aerial_robot_base_node" name="aerial_robot_base_node" ns="$(arg robot_ns)" output="screen">
    <param name="tf_prefix" value="$(arg robot_ns)"/>
    <param name="param_verbose" value="False"/>
    <param name="main_rate" value="100"/>               <!-- Rate of update in Hertz -->
  </node>

  <!-- ########### Initialize Robot Model  ########### -->
  <arg name="description_mode" value="urdf" unless="$(arg simulation)"/>
  <arg name="description_mode" value="gazebo" if="$(arg simulation)"/>
  <include file="$(find aerial_robot_model)/launch/aerial_robot_model.launch">
    <arg name="headless" value="$(arg headless)"/>
    <arg name="robot_model" value="$(find beetle_omni)/robots/beetle_art_omni.$(arg description_mode).xacro"/>
    <arg name="robot_ns" value="$(arg robot_ns)"/>
    <arg name="rviz_config" value="$(arg config_dir)/rviz/nmpc.rviz"/>
    <arg name="rviz_init_pose" value="$(arg config_dir)/rviz/RvizInit.yaml"/>
    <arg name="need_joint_state" value="False" if ="$(eval arg('simulation') or arg('real_machine'))"/>
  </include>

  <!-- ###########  Sensors  ########### -->
  <include file="$(find beetle_omni)/launch/include/sensors.launch.xml"> <!-- TODO .xml ?!!!??!! shouldn't be just .launch??? -->
    <arg name="robot_id" value="$(arg robot_id)"/>
    <arg name="robot_ns" value="$(arg robot_ns)"/>
    <arg name="real_machine" value="$(arg real_machine)"/>
    <arg name="simulation" value="$(arg simulation)"/>    
  </include>

  <!-- ###########  Servo Bridge  ########### -->
  <node pkg="aerial_robot_model" type="servo_bridge_node" name="servo_bridge" ns="$(arg robot_ns)" output="screen"/>

  <!-- ###########  Simulation in Gazebo  ########### -->
  <include file="$(find aerial_robot_simulation)/launch/simulation.launch" if = "$(eval arg('simulation') and not arg('real_machine'))">
    <arg name="robot_ns" default="$(arg robot_ns)"/>
    <arg name="gui" value="False" if="$(arg headless)"/>
    <arg name="headless" default="$(arg headless)"/>
    <arg name="launch_gazebo" default="$(arg launch_gazebo)"/>
    <arg name="worldtype" value="$(arg worldtype)"/>
    <arg name="spawn_x" value="$(arg spawn_x)"/>
    <arg name="spawn_y" value="$(arg spawn_y)"/>
    <arg name="spawn_z" value="$(arg spawn_z)"/>
    <arg name="spawn_yaw" value="$(arg spawn_yaw)"/>
  </include>

</launch>
